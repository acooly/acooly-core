<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="true">

	<description>Shiro安全配置</description>

	<!-- Shiro's main business-tier object for web-enabled applications -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
		<property name="cacheManager" ref="shiroEhcacheManager" />
	</bean>

	<!-- 自定义的Realm -->
	<bean id="shiroDbRealm" class="com.acooly.module.security.shiro.realm.ShiroDbRealm">
		<property name="authenticationCachingEnabled" value="false" />
		<property name="permissionResolver" ref="pathMatchPermissionResolver" />
	</bean>

	<!-- 根据AntPathMatch规格匹配的权限 -->
	<bean id="pathMatchPermissionResolver" class="com.acooly.module.security.shiro.realm.PathMatchPermissionResolver"></bean>

	<!-- 配置注销Filter.默认情况，Shiro使用反射直接创建默认构造的LogoutFilter,默认redirectUrl参数为/, 这里通过Spring配置logout服务后，会在ShiroFilterFactoryBean的postProcessBeforeInitialization 方法中以beanId为Key覆盖默认反射创建的LogoutFilter实例. 这里也可以扩展，注意，BeanId一定要匹配 
		ShiroFilterFactoryBean中filterChainDefinitions的配置。 -->
	<bean id="logout" class="com.acooly.module.security.shiro.filter.NotifyLogoutFilter">
		<property name="shireLoginLogoutSubject" ref="shireLoginLogoutSubject" />
		<property name="redirectUrl" value="/manage/login.html" />
	</bean>

	<!-- 扩展FormAuthenticationFilter，支持Captcha验证 -->
	<bean id="authc" class="com.acooly.module.security.shiro.filter.CaptchaFormAuthenticationFilter">
		<property name="shireLoginLogoutSubject" ref="shireLoginLogoutSubject" />
		<!-- 这里的配置会覆盖shiroFilter的配置 -->
		<property name="failureUrl" value="/manage/onLoginFailure.html" />
		<property name="successUrl" value="/manage/onLoginSuccess.html" />
	</bean>
	<!-- URL path match 授权 -->
	<bean id="urlAuthr" class="com.acooly.module.security.shiro.filter.UrlResourceAuthorizationFilter" />

	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="com.acooly.module.security.shiro.ShiroFilterFactoryBeanExtention" init-method="appendCustomFilter">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/manage/login.html" />
		<property name="unauthorizedUrl" value="/manage/onUnauthorized.html" />
		<property name="filterChainDefinitions">
			<value>
				/manage/login.html = authc
				/manage/logout.html = logout
				/manage/error/* = anon
				/manage/*.html = anon
				/manage/*.jsp = user
				/manage/layout/* = user
				/manage/system/* = user
				/manage/** = urlAuthr
				/** = anon
			</value>
		</property>
	</bean>

	<!-- 处理登录注销时间监听通知 -->
	<bean id="shireLoginLogoutSubject" class="com.acooly.module.security.shiro.listener.ShireLoginLogoutSubject"></bean>

	<!-- 用户授权信息Cache, 采用EhCache -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:spring/acooly/module/security/ehcache-shiro.xml" />
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	
</beans>